// As window object is only available in browsers and not in node
// running these codes in node will give you an error
// Run these in browser console

// We have been using let to declare a variable
// but there is another keyword : var for same purpose
// whats the difference?
// Let's look at the examples below :

function anotherLoop() {
    for (let i = 1; i <= 5; i++) {
        console.log(i);
    }

    // console.log(i);
}

anotherLoop();

// we will get 1 to 5 in console.
// In the previous lesson we learnt that
// a vaiable declared using let is block-scoped
// so if we try to log i outside the block, we will get an
// error saying : i is not defined

// Now what if we use var ?

function anotherLoop() {
    for (var i = 1; i <= 5; i++) {
        console.log(i);
    }

    console.log(i);
}
anotherLoop();

// we get 1 to 6
// that is because the scope of var is not limited to the block
// once the loop terminates after checking value of i that is 6
// that value is logged into the console from the statement outside the loop-block
// Note : variables declared using var keyboard are limited to the function
// It's best to use let/const

// There is another important issue with the var keyword
// that is with the global variables
// If we create a variable using var keyword
// it will create a global variable and attach it with the window object in browsers
// or global object in node

var thisIsGlobalVariable =
    "Global Variable is attached to Window Object in Browers and Global object in Node";
console.log(window.thisIsGlobalVariable);

// As windows object is a central component, there is only one instance of it
// And if a third party library you are using has a same variable name
// that can override your variable value
// This will create a lot issues in the program

// Another thing to note :
// when you declare a function using :

function thisIsFunction() {
    console.log("Hello, World!");
}

console.log(window.thisIsFunction);
// This function is also a global function and attaches it to windows object

// To prevent these we can encapsulate them into seperate modules
